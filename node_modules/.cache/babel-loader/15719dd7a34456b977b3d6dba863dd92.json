{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Desktop/Bravo19/React/tic-tac-toe2/src/User.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box.js';\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      count: 1,\n      inside: \"\" //create a value that is set to an empty string that replaces the value in board\n\n    };\n  } // handleOddClick = () => {\n  // let { userInput } = this.state\n  // this.setState({userInput: \"X\"})\n  // }\n  // handleEvenClick = () => {\n  //   let { userInput } = this.state\n  //   this.setState({userInput: \"O\"})\n  // }\n  // handleClick = () => {\n  //   let { board, count, value } = this.state\n  //   let newCount = count + 1\n  //   if (count % 2 !== \"\"){\n  //     this.setState({count: newCount})\n  //     //Need to replace the value for each Box to \"X\" or \"O\" to have it display on gameBoard\n  //     this.setState({board: <Box value=\"X\" />})\n  //   } else {\n  //     this.setState({count: newCount})\n  //     this.setState({board: <Box value=\"O\" />})\n  //   }\n  // }\n  //create new function that takes in synthetic event and use e.target.value and e.target.src\n\n\n  render() {\n    let board = this.state.board;\n    let gameBoard = board.map((value, index) => {\n      return React.createElement(Box, {\n        value: value,\n        index: index,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"gameBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, gameBoard));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/Matt/Desktop/Bravo19/React/tic-tac-toe2/src/User.js"],"names":["React","Component","Box","User","constructor","props","state","board","count","inside","render","gameBoard","map","value","index","handleClick"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAC3BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACE,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,CADI;AAEXC,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,MAAM,EAAE,EAHG,CAIX;;AAJW,KAAb;AAMH,GAT0B,CAU3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAE;AAAA,QACAH,KADA,GACU,KAAKD,KADf,CACAC,KADA;AAEN,QAAII,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1C,aACE,oBAAC,GAAD;AACE,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,KAAK,EAAEC,KAFT;AAGE,QAAA,WAAW,EAAE,KAAKC,WAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KARe,CAAhB;AASA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,SADH,CADF,CADF;AAOD;;AApD0B;;AAuD7B,eAAeR,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box.js'\n\nclass User extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        count: 1,\n        inside: \"\"\n        //create a value that is set to an empty string that replaces the value in board\n      }\n  }\n  // handleOddClick = () => {\n  // let { userInput } = this.state\n  // this.setState({userInput: \"X\"})\n  // }\n  // handleEvenClick = () => {\n  //   let { userInput } = this.state\n  //   this.setState({userInput: \"O\"})\n  // }\n\n  // handleClick = () => {\n  //   let { board, count, value } = this.state\n  //   let newCount = count + 1\n  //   if (count % 2 !== \"\"){\n  //     this.setState({count: newCount})\n  //     //Need to replace the value for each Box to \"X\" or \"O\" to have it display on gameBoard\n  //     this.setState({board: <Box value=\"X\" />})\n  //   } else {\n  //     this.setState({count: newCount})\n  //     this.setState({board: <Box value=\"O\" />})\n  //   }\n  // }\n\n  //create new function that takes in synthetic event and use e.target.value and e.target.src\n\n  render(){\n    let { board } = this.state\n    let gameBoard = board.map((value, index) => {\n      return (\n        <Box\n          value={value}\n          index={index}\n          handleClick={this.handleClick}\n        />\n      )\n    })\n    return (\n      <div>\n        <div id=\"gameBoard\">\n          {gameBoard}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}