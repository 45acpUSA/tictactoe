{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Desktop/Bravo19/React/tic-tac-toe2/src/User.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box.js';\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      let _this$state = this.state,\n          board = _this$state.board,\n          count = _this$state.count;\n\n      if (count % 2 !== \"\") {\n        //Need to replace the value for each Box to \"X\" or \"O\" to have it display on gameBoard\n        this.setState({\n          userInput: \"X\"\n        });\n      } else {\n        this.setState({\n          userInput: \"O\"\n        });\n      }\n    };\n\n    this.state = {\n      board: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      count: 1 //create a value that is set to an empty string that replaces the value in board\n      // userInput: 0\n\n    };\n  } // handleOddClick = () => {\n  // let { userInput } = this.state\n  // this.setState({userInput: \"X\"})\n  // }\n  // handleEvenClick = () => {\n  //   let { userInput } = this.state\n  //   this.setState({userInput: \"O\"})\n  // }\n\n\n  //create new function that takes in synthetic event and use e.target.value and e.target.src\n  render() {\n    let board = this.state.board;\n    let gameBoard = board.map((value, index) => {\n      return React.createElement(Box, {\n        value: value,\n        index: index,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"gameBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, gameBoard));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/Matt/Desktop/Bravo19/React/tic-tac-toe2/src/User.js"],"names":["React","Component","Box","User","constructor","props","handleClick","state","board","count","setState","userInput","render","gameBoard","map","value","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,UAAhB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAC3BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAkBlBC,WAlBkB,GAkBJ,MAAM;AAAA,wBACK,KAAKC,KADV;AAAA,UACZC,KADY,eACZA,KADY;AAAA,UACLC,KADK,eACLA,KADK;;AAElB,UAAIA,KAAK,GAAG,CAAR,KAAc,EAAlB,EAAqB;AACnB;AACA,aAAKC,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACD,OAHD,MAGO;AACL,aAAKD,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAd;AACD;AACF,KA1BiB;;AAEhB,SAAKJ,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADE;AAETC,MAAAA,KAAK,EAAE,CAFE,CAGT;AACA;;AAJS,KAAb;AAMD,GAT0B,CAU3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAYA;AAEAG,EAAAA,MAAM,GAAE;AAAA,QACAJ,KADA,GACU,KAAKD,KADf,CACAC,KADA;AAEN,QAAIK,SAAS,GAAGL,KAAK,CAACM,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1C,aACE,oBAAC,GAAD;AACE,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,KAAK,EAAEC,KAFT;AAGE,QAAA,WAAW,EAAE,KAAKV,WAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KARe,CAAhB;AASA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,SADH,CADF,CADF;AAOD;;AAjD0B;;AAoD7B,eAAeV,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Box from './Box.js'\n\nclass User extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        board: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        count: 1,\n        //create a value that is set to an empty string that replaces the value in board\n        // userInput: 0\n      }\n  }\n  // handleOddClick = () => {\n  // let { userInput } = this.state\n  // this.setState({userInput: \"X\"})\n  // }\n  // handleEvenClick = () => {\n  //   let { userInput } = this.state\n  //   this.setState({userInput: \"O\"})\n  // }\n\n  handleClick = () => {\n    let { board, count } = this.state\n    if (count % 2 !== \"\"){\n      //Need to replace the value for each Box to \"X\" or \"O\" to have it display on gameBoard\n      this.setState({userInput: \"X\"})\n    } else {\n      this.setState({userInput: \"O\"})\n    }\n  }\n\n  //create new function that takes in synthetic event and use e.target.value and e.target.src\n\n  render(){\n    let { board } = this.state\n    let gameBoard = board.map((value, index) => {\n      return (\n        <Box\n          value={value}\n          index={index}\n          handleClick={this.handleClick}\n        />\n      )\n    })\n    return (\n      <div>\n        <div id=\"gameBoard\">\n          {gameBoard}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}